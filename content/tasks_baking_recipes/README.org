#+AUTHOR: Martin Richter
#+TITLE: Self-directed Learning Tasks: Create a Recipe Book
#+EMAIL: martin.richter@nottingham.ac.uk

#+OPTIONS: <:nil d:nil timestamp:t ^:nil tags:nil toc:nil num:nil \n:t
#+STARTUP: fninline overview inlineimages

This folder contains step-by-step examples on how to use git.

In order to keep in language agnostic, we will use baking recipes as
an example. We will create simple text files with recipes and then
modify their content. To mimic more complicated situations, we will
ask you to pretend to be a second person as well.

* Overview

We assume that you have already set-up ~git~ so that you are able to
create new, empty repositories.

The tasks will be all hands-on and you are encouraged to open your
installation of git and type along.

We will view the material presented here from three angles:
- a) :: Why are we doing a special thing?
- b) :: How are we doing it practically?
- c) :: What are some of the technical details behind the scenes?

You can mainly focus on point *b)* if you prefer. Some of you will find
*a)* and *c)* helpful to understand what is going on - everyone's style of
learning is different!

** Learning Outcomes                                                    :LOs:

By the end of these tasks, you will be able to
1. Know how to put files under version control
2. Know the difference between the /index/ and the /repository/
3. Be able to look at the history of a repository
4. ...

** Before you start

There are a few requirements. The most important one is, of course, having a ~git~ installation on your computer.

You can get /git/ here: [[https://git-scm.com]].

It mentions several download and install options. For example, if you
are on /Windows/ but cannot install software, you might want to try the portable version here:
https://git-scm.com/download/win (version ~v2.34.1~ at the time of writing).

If you download this and unpack it, then there is a ~PortableGit/git-bash-exe~.
If you start this, it will give you a command line like shown [[fig:git_bash_windows_01][below]] in which you can

#+name: fig:git_bash_windows_01
#+caption: Screenshot of a ~bash~ shell on /Windows/ for
#+caption: entering the below command line steps.
#+caption: Note: The steps shown here are the first steps of
#+caption: [[*SDL 01 - Creating a Repository and Adding Content][the first SDL 01 below]].
[[file:figures/task_00_010.png]]

#+name: fig:git_bash_windows_02
#+caption: If you want to get rid of the warning shown in
#+caption: the above, you can do this instead.
[[file:figures/task_00_020.png]]

In order to be independent from specific UIs or IDEs, we will mainly
focus on the command line here. Usually, the options in UIs and IDEs
are names very similar to the options here.

For computers at the University of Nottingham you can either use the
above portable version of ~git~ or see here:
[[https://workspace.nottingham.ac.uk/display/Software/Git+for+Windows]]

NB: For Computer Science it is available on the remote desktops:
https://rdweb.wvd.microsoft.com/arm/webclient

For a list of possible UIs for git, see:
[[https://git-scm.com/download/gui/windows]]

(I personally use [[https://magit.vc]] (runs inside [[https://emacs.org]]).)

* Tasks

** SDL 01 - Creating a Repository and Adding Content
This self-directed learning task will show you
- how to create a new, empty repository (~git init~)
- how to add files to it (~git add~ and ~git commit~)

*** SDL 01.01 - Create a New Repository
First we need to create a new repository. It will start out as empty
and we will add a first file.

**** Using the Command Line                                            :cmds:
#+begin_src shell-script
  cd ~/                   # Go to your home directory
  mkdir recipe_book       # create a folder named "recipe_book"
  git init recipe_book    # create an empty git repository
  cd recipe_book
                          # set name and email if we don't want to
                          # use global default (optional)
  git config --local user.name "Martin Richter"
  git config --local user.email "martin.richter@nottingham.ac.uk"
  # create a README file (good practice!)
  echo "A collection of recipes" > README.md
  # and add it to the index (= mark it for being saved in the repo)
  git add README.md
  # register the marked changes in the repository
  git commit -m 'initial commit for recipes'
#+end_src

**** Your Task                                                         :task:
Repeat the above steps and create our own repository with an initial
commit. Feel free to change the names of the repository, the content
of the ~README.md~, and, of course, the name and email.

Keep the name of the ~README.md~ file though - /github/ will later use
the format of this file to display its content nicely.

*** SDL 01.02 - Add Some More Files
In order to see the basic operations, let us add files to the repository.
**** Create some Files
Create a simple text file called =biscuits.txt= with the following content:
#+begin_example
Ingredients: 250g flour, 125g margarine, 60g sugar, 3tsp vanilla extract, pinch of salt, 1 egg.

Mix everything, let rest for 30 min in fridge, roll out and cut into shape.
Bake for 10 - 12 minutes (200 degrees)
#+end_example
Furthermore, create another file called =cinemon_stars.txt=:
#+begin_example
Prepare dough like written in biscuits.txt but add 1/2 teaspoon of
cinemon and 2 tsp of almond extract.
#+end_example
You can choose any text editor you want but please ensure you are
storing the information as simple text files, not Word documents.

***** Using the Command Line
Once the above file exists and are placed inside our ~recipe_book~
folder, we can have a look at the folders content:
#+begin_src shell-script
git status
#+end_src
This will tell you:
#+begin_example
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        biscuits.txt
        cinemon_stars.txt

nothing added to commit but untracked files present (use "git add" to track)
#+end_example
This tells you that there is a file called ~biscuits.txt~ but git does
not yet care about it (it is /untracked/).

If you can also use ~gitk~ (for example) to see the repository status:
#+begin_src shell-script
  cd ~/recipe_book    # go into our repository (if not yet there)
  gitk                # open `gitk` here
#+end_src
[[file:figures/task_02_010.png]]

You will see that your ~biscuits.txt~ is not there - again, due to it
being untracked.

**** Add Files to the Index

Just like in [[*SDL 01.01 - Create a New Repository][SDL 01.01 - Create a New Repository]] above, we need to add
the files to the /index/ or /staging-area/. This makes git aware of
the fact that we are going to add these files to the repository soon.

***** Technical Background                                       :background:
The /staging-area/ might seem unnecessary at the beginning. But it will help
us later when we only want to work on a subset of changes rather than
all new things present in a repository.

***** Using the Command Line                                           :cmds:
To add the files to the index, do:
#+begin_src shell-script
git add biscuits.txt
#+end_src
Before you proceed with the second file: Have a look at the output of
~git status~ now! Then continue:
#+begin_src shell-script
git add cinemon_stars.txt
#+end_src
Now the status of the repository looks like this:
#+begin_src shell-script
  git status
#+end_src
#+begin_example
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   biscuits.txt
        new file:   cinemon_stars.txt
#+end_example

Note the above hint about the ~git restore~ -- apparently we can take
elements out of the index as well! Let's try!
#+begin_src shell-script
  git restore --staged biscuits.txt
  git status
#+end_src
and we get:
#+begin_example
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   cinemon_stars.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        biscuits.txt
#+end_example

**** Commit the New File
***** Using the Command Line                                           :cmds:
If we now commit what is in our staging area by calling
#+begin_src shell-script
  git commit --message 'add a cinemon star recipe'
#+end_src
we get this ~git status~:
#+begin_example
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        biscuits.txt

nothing added to commit but untracked files present (use "git add" to track)
#+end_example

Let us continue and add all remaining files: ~git add biscuits.txt~ and then
#+begin_src shell-script
git commit -m 'add biscuit recipe'
#+end_src

What does ~git status~ tell us now? For comparison, this is how the
~gitk~ window would look like:
#+name: fig:gitk_example_after_three_commits
#+caption: An overview of how our repository looks like after three commits.
[[file:figures/task_03_010.png]]

***** Advice: Use Meaningful commit messages                  :best_practice:

Note how we specified a _message_ explaining what we did using
~--message '...'~ or ~-m '...'~.  Alternatively, you can leave this
command line parameter away. Then an editor will open and ask you for
a _commit message_. Which editor that is depends on your
configuration. In an IDE or GUI it would probably be included.

The typical format of a commit message is
1. 50 characters on a single line
2. If you want to elaborate more, then leave one blank line and
   continue with now up to 72 characters.

While this sounds a bit strange, this has merit. Many tools will only
show you the short first line when presenting an overview, for
example (see for example [[fig:gitk_example_after_three_commits][above]]).

**** Your Task                                                         :task:
Repeat the above steps adding the two files to the repository. Feel
free to add more files to it as well.

What happens if you try to add a Word document? At this point, not
much. It would be added just like the other files. However, we would
get into trouble later, see [[*SDL 01.03 - Changing existing files][SDL 01.03 - Changing existing files]].

** SDL 02 - Changing Files and Examining the History of Changes
This self-directed learning task will show you
- how to change files and register these changes in the repository
  (~git add~, ~git commit~)
- how to see how the repository is growing as we go along (~git
  status~, ~git diff~, ~git log~, ~git show~)

*** SDL 01.03 - Changing existing files
This sub-task will tell you why it is important to use simple text
files and how a version control system can help you keep track of
changes.

Before we change the files which are in the repository, let us get an
overview of which files _are_ in the repository:
#+begin_src shell-script
git ls-files
#+end_src
yields
#+begin_example
README.md
biscuits.txt
cinemon_stars.txt
#+end_example
Note that this is different from what we get when examining the folder:
#+begin_src shell-script
ls -a
#+end_src
shows also hidden entries (here these are entries which start with a dot: ~.~):
#+begin_example
.  ..  biscuits.txt  cinemon_stars.txt	.git  README.md
#+end_example
Note that there is a ~.git~. It is a directory which contains all
information relevant to this git repository.

**** Change the Files in the Repository

Let us now change content of our ~README.md~ to read
#+begin_src markdown
  # Overview
  A collection of recipes

  ## Recipes
  So far we have:
  1. Biscuits (see [here](biscuits.txt))
  2. Cinemon Stars (see [here](cinemon_stars.txt))
#+end_src
to get a nicer overview of the recipes.

**** Examine the State of the Changed File                             :cmds:
Once you have put this into the ~README.md~ file, we can call ~git
status~ again. This time we get:
#+begin_example
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   README.md

no changes added to commit (use "git add" and/or "git commit -a")
#+end_example

Note that changing an existing file is shown as /modified/ in
comparison to the above /new file/ when we were adding them.

We can see in a bit more detail what we have changed by calling:
#+begin_src shell-script
git diff
#+end_src
and we get
#+begin_src diff
diff --git a/README.md b/README.md
index 2a9e5c1..6f0768e 100644
--- a/README.md
+++ b/README.md
@@ -1 +1,7 @@
+# Overview
 A collection of recipes
+
+## Recipes
+So far we have:
+1. Biscuits (see [here](biscuits.txt))
+2. Cinemon Stars (see [here](cinemon_stars.txt))
#+end_src
Note how the line which was already three (/A collection of recipes/)
does not have a ~+~ in front while all the new lines are automatically
recognised as new.

Let us add these changes to the repository. We call
#+begin_src shell-script
  git add README.md
  git commit -m 'add recipe overview to README.md'
#+end_src

**** Advice: Keep commits small and logically consistent      :best_practice:

Keeping commits small will later help you understand better not only
what you did but also what others did. It will greatly simplify should
you be looking for a bug using ~git bisect~ [[*SDL XX - Using Bisection to find Bugs][later]].

**** Change the remaining files

Now let's also change the content of the two recipe files!
Let us change ~biscuits.txt~ to
#+begin_example
# Ingredients
250g flour
125g margarine
60g sugar
3tsp vanilla extract
pinch of salt
1 egg.

# Steps
- Mix everything
- let rest for 30 min in fridge
- roll out and cut into shape
- Bake for 10 - 12 minutes (200 degrees)
#+end_example
and ~cinemon_stars.txt~ to
#+begin_example
Prepare dough like written in [the biscuits recipe](biscuits.txt) but add 1/2 teaspoon of
cinemon and 2 tsp of almond extract.
#+end_example

**** Committing the Changes to the repository                          :cmds:
A ~git diff~ now shows us all the differences we made. If we
explicitly state the filename, then it only shows the diff for this
file:
#+begin_src shell-script
git diff cinemon_stars.txt
#+end_src
#+begin_src diff
diff --git a/cinemon_stars.txt b/cinemon_stars.txt
index 43998d3..bdc5db2 100644
--- a/cinemon_stars.txt
+++ b/cinemon_stars.txt
@@ -1,2 +1,2 @@
-Prepare dough like written in biscuits.txt but add 1/2 teaspoon of
+Prepare dough like written in [the biscuits recipe](biscuits.txt) but add 1/2 teaspoon of
 cinemon and 2 tsp of almond extract.
#+end_src
Despite the fact that we only inserted a few characters, git says we
have removed a whole line ( starting with ~-~ ) and added a completely
new one ( starting with ~+~ ).

If necessary, you can also highlight the changes on a word level using
~git diff --color-words cinemon_stars.txt~.

If we do a ~git diff biscuits.txt~, then we get a lot of lines with
~+~ and ~-~ because the content of the whole file changed. In cases
like this we can also just show a statistic:
#+begin_src shell-script
  git diff --stat biscuits.txt
#+end_src
and we get:
#+begin_example
biscuits.txt | 15 ++++++++++++---
1 file changed, 12 insertions(+), 3 deletions(-)
#+end_example

We can now add one file after the other -- this is where the /staging
area/ comes in handy: We add the changes as separate commits:
#+begin_src shell-script
  git add cinemon_stars.txt
  git commit -m 'restructure biscuit recipe'
  git commit --all -m 'add link in cinemon star recipe'
#+end_src

Note: You can use ~--all~ in ~git commit~ to commit all remaining
changed files.

**** Your Task                                                         :task:
Repeat the above steps adding the two files to the repository. Feel
free to add more files to it as well.

What happens if you try to add a Word document? At this point, not
much. It would be added just like the other files. However, we would
get into trouble later, see [[*SDL 01.03 - Changing existing files][SDL 01.03 - Changing existing files]].

Repeat the above steps and change the files in the repository.
Examine the repository using ~git status~ before and after adding
changes to the staging area. And examine what you are about to commit
with ~git diff~.

*** SDL 01.04 Examining what we have done so far
This sub-task will tell you how to examine what has happened to a
repository over time. The new commands introduced here will be ~git
log~ and an outlook in how to create custom commands for
certain tasks.

**** Examine the Commit History                                        :cmds:
We already saw one way of having a look at the history: By invoking
~gitk~. When we we do this at this stage, we get a picture as shown in
the screenshot [[fig:state_repo_gitk_changed_files][below]].

#+name: fig:state_repo_gitk_changed_files
#+caption: State of the repository after all files have been changed.
[[file:figures/task_04_010.png]]

There is a faster way to get an overview of the recent history using the command
#+begin_src shell-script
git log
#+end_src
which gives the below output (maybe even in color)
#+begin_example
git log
commit 7d4a5110ac8f09a835ffb3395286f6e65a0ecf49 (HEAD -> master)
Author: Martin Richter <martin.richter@nottingham.ac.uk>
Date:   Mon Jan 10 19:00:42 2022 +0000

    add link in cinemon star recipe

commit bd180d6e425c57180453e5cf33303445110be978
Author: Martin Richter <martin.richter@nottingham.ac.uk>
Date:   Mon Jan 10 19:00:49 2022 +0000

    restructure biscuit recipe
#+end_example

The command has plenty of options which you can read about using ~git
help log~. One of them is
#+begin_src shell-script
  git log --oneline
#+end_src
#+begin_example
7d4a511 (HEAD -> master) add link in cinemon star recipe
bd180d6 restructure biscuit recipe
ad7f952 add recipe overview to README.md
957e0f7 add biscuit recipe
7dae468 add a cinemon star recipe
efa0975 initial commit for recipes
#+end_example
Note that this is the reason why the commit message should follow the
format described in the [[*Advice: Use Meaningful commit messages][above best-practices]]: Here we only see the
first line of the commit and it should describe what the commit did to
the repository.

Git log even allows you to specify a custom format like this:
#+begin_src shell-script
git log --graph --all --pretty=format:'%Cred%h%Creset - %Cgreen(%cr)%Creset %s%C(yellow)%d%Creset' --abbrev-commit --date=relative --decorate'
#+end_src
which sets the color as shown in [[fig:example_output_custom_log][the figure below]].
#+name: fig:example_output_custom_log
#+caption: Example output of customized ~git log~
[[file:figures/task_03_030.png]]

At this point it is worth mentioning that we can save abbreviations
like this in our global git configuration. We can, for example, give
the very long command above a shorter alias name ~graph~ (which does
not exist):
#+begin_src shell-script
git config --global alias.graph "log --graph --all --pretty=format:'%Cred%h%Creset - %Cgreen(%cr)%Creset %s%C(yellow)%d%Creset' --abbrev-commit --date=relative --decorate"
#+end_src
Now, we get the same output as [[fig:example_output_custom_log][in the figure above]] by simply calling
~git graph~.

**** Technical Background                                        :background:
The git configuration is stored in two places: One is for your user
and applies to all every repository you work in. This /global/
configuration is a simple text file usually stored in the users
~$HOME~ directory.

It is good practice to set your /name/ and /email/ in the global
configuration, see [[fig:git_bash_windows_02][the screenshot above]]:
#+begin_src shell-script
  git config --global user.name "Martin Richter"
  git config --global user.email "martin.richter@nottingham.ac.uk"
#+end_src
If we do this as well here, our global configuration file reads:
#+begin_src shell-script
cat ~/.gitconfig
#+end_src
#+begin_src conf
[alias]
        graph = log --graph --all --pretty=format:'%Cred%h%Creset - %Cgreen(%cr)%Creset %s%C(yellow)%d%Creset' --abbrev-commit --date=relative --decorate
[user]
        name = Martin Richter
        email = martin.richter@nottingham.ac.uk
#+end_src

Besides this /global/ file, each repository has a local configuration
as well - this allows you for example to use a different email address
in a specific repository. This file is in ~.git/config~ relative to
the base directory of the repository:
#+begin_src shell-script
  cd ~/recipe_book
  cat .git/config
#+end_src
#+begin_src conf
  [core]
          repositoryformatversion = 0
          filemode = true
          bare = false
          logallrefupdates = true
  [branch "master"]
          rebase = true
  [user]
          name = Martin Richter
          email = martin.richter@nottingham.ac.uk
#+end_src
Note that this repeats the information about our user as we set those
with the ~git --local ...~ above.

**** Your Task                                                         :task:
Examine your repository and the configuration you have.

Try to add a custom command /wdiff/ which highlights changes in
/words/ using the above ~git diff --color-words cinemon_stars.txt~
command.


** SDL XX - Using Bisection to find Bugs

This is deeply linked to the subjects of having good, automated tests
for your code.

Our recipe example does not really live up to this type of problems
due to its simplicity.

# Local Variables:
# mode: org
# ispell-local-dictionary: "british"
# eval: (flyspell-mode t)
# eval: (flyspell-buffer)
# End:
