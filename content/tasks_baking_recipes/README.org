#+AUTHOR: Martin Richter
#+TITLE: Self-directed Learning Tasks: Create a Recipe Book
#+EMAIL: martin.richter@nottingham.ac.uk

#+OPTIONS: <:nil d:nil timestamp:t ^:nil tags:nil toc:nil num:nil \n:t
#+STARTUP: fninline inlineimages showall

This folder contains step-by-step examples on how to use git.

In order to keep in language agnostic, we will use baking recipes as
an example. We will create simple text files with recipes and then
modify their content. To mimic more complicated situations, we will
ask you to pretend to be a second person as well.

* Overview

We assume that you have already set-up ~git~ so that you are able to
create new, empty repositories.

The tasks will be all hands-on and you are encouraged to open your
installation of git and type along.

We will view the material presented here from three angles:
- a) :: Why are we doing a special thing?
- b) :: How are we doing it practically?
- c) :: What are some of the technical details behind the scenes?

You can mainly focus on point *b)* if you prefer. Some of you will find
*a)* and *c)* helpful to understand what is going on - everyone's style of
learning is different!

** TODO Learning Outcomes                                               :LOs:

By the end of these tasks, you will be able to
1. Know how to put files under version control
2. Know the difference between the /index/ and the /repository/
3. Be able to look at the history of a repository
4. ...

** Before you start

   [[file:before_you_start.org][Please follow these steps]] to set up your configuration.

* Tasks

** SDL - Creating a Repository and Adding Content
This self-directed learning task will show you
- how to create a new, empty repository (~git init~)
- how to add files to it (~git add~ and ~git commit~)

- SDL 01.01 :: [[file:sdl_create_repo.01.org][Create a New Repository]]
- SDL 01.02 :: [[file:sdl_create_repo.02.org][Add Some More Files]]

** SDL - Changing Files and Examining the History of Changes
This self-directed learning task will show you
- how to change files and register these changes in the repository
  (~git add~, ~git commit~)
- how to see how the repository is growing as we go along (~git
  status~, ~git diff~, ~git log~, ~git show~)

- SDL 02.01 :: [[file:sdl_change_files.01.org][Changing existing files]]
- SDL 02.02 :: [[file:sdl_change_files.02.org][Examining what we have done so far]]
- SDL 02.03 :: [[file:sdl_change_files.03.org][Examining single commits in more detail and Find Changes]]

** SDL - Branching
This self directed learning task will introduce the concept of
/branches/: Ways of keeping different versions of a software under one
hood and allow for easy switching between them.

We will introduce them first in our local repository and later
highlight [[*SDL - Working with Remotes][in a later SDL]] how to do the same when collaborating with
others.

- You will learn how to use ~git branch~ to create new branches and see
  the available ones.
- The command ~git checkout~ is used to change branches.
- The command ~git tag~ allows to permanently mark specific versions.

- SDL 03.01 :: [[file:sdl_branching.01.org][Creating new Branches]]
- SDL 03.02 :: [[file:sdl_branching.02.org][Showing differences between branches]]
- SDL 03.03 :: [[file:sdl_branching.03.org][Creating tags to have permanent names]]

** SDL - Merging Branches
Branches introduced a concept which allows for a diverging
history. But especially with /bug-fixes/ in software we want to get
them back into our main version!

We will use the typo (deliberately) introduced in [[file:sdl_branching.01.org::src:add_typo][an earlier step]].

- You will learn how to merge branches together thereby combining
  there changes. This is done using ~git merge~
- We will look at a simple and a more difficult example in the next
  SDL, [[*SDL - Merge Conflicts][SDL - Merge Conflicts]]

- SDL 04.01 :: [[file:sdl_merging_01.org][Fixing a bug in a separate branch - and merge back]]
- SDL 04.02 :: [[file:sdl_merging_02.org][A more complicated example and how to abort a merge]]

** SDL - Merge Conflicts
In this example we will create a proper conflict -- and looks at ways
to resolve it.

To get a feeling of how complicated it can get, let us combine our
~vegan~ and ~gluten_free~ recipes into a ~vegan_and_gf~ branch.

At the end of this task, you will be able to
- understand what the words and markers in a merge conflict mean and
- how to resolve them
But let there be a warning ahead: Merge conflicts mainly mean finding
a common ground for opposite views. When you work with colleagues, it
is necessary to talk to them at this stage!

- SDL 05.01 :: [[file:sdl_merge_conflict_01.org][Examining Merge CONFLICTs]]
- SDL 05.02 :: [[file:sdl_merge_conflict_02.org][Solving Merge CONFLICTs]]

For more information, see [[https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging][Pro Git (book, online version)]].

** TODO SDL - Rebase Branches
The above method of resolving conflicts via /merges/ has a
disadvantage: It leaves the history of the repository in a very
non-linear state (see [[file:sdl_merge_conflict_02.org::fig:gitk_after_conflict_resolution][the screenshot]]).

Instead of these merges, which take two branches and bundle them back
together to form a combined, resolved new state, we can use
/rebases/. They detach the current branch from the last common
ancestor and try to reattach it _on top_ of the other branch - a bit
like [[https://en.wikipedia.org/wiki/Grafting][grafting]] a branch of an apple tree onto a different trunk.

We will re-visit our above conflict situation and use ~git rebase~.

At the end of this task you will be able to
- understand the differences between /merge/ and /rebase/
- point out the advantages and disadvantages of /rebase/.

Because we already examined the merge conflict [[*SDL - Merge Conflicts][above]], we can start
right away: First, we will rebase the ~vegan~ branch onto the
~gluten_free~ one. Second, we will do it the other way around. In
reality, you would rebase _your_ changes onto the existing ones. Here,
we do it both ways solely for educational purposes.

- SDL 06.01 :: [[file:sdl_rebase_01.org][Rebase ~vegan~ onto ~gluten-free~ to combine content]]
- SDL 06.02 :: [[file:sdl_rebase_02.org][Rebase ~gluten-free~ onto ~vegan~ to combine content]]

For more information, see [[https://git-scm.com/book/en/v2/Git-Branching-Rebasing][Pro Git (book, online version)]].

** TODO SDL - Working with Remotes

- SDL 07.02 :: [[file:sdl_remotes_02.org][Using Github]]

** TODO SDL - Using Bisection to find Bugs

This is deeply linked to the subjects of having good, automated tests
for your code.

Our recipe example does not really live up to this type of problems
due to its simplicity.

# Local Variables:
# mode: org
# ispell-local-dictionary: "british"
# eval: (flyspell-mode t)
# eval: (flyspell-buffer)
# End:
